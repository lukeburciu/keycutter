# Git functions

# Function to set Git config
git-config-set() {
    local scope="$1"
    local key="$2"
    local value="$3"
    local config_flag=""
    [[ "$scope" == "global" ]] && config_flag="--global"
    
    git config $config_flag "$key" "$value"
    log "Set $key to $value ($scope config)"
}

# Function to get Git config
git-config-get() {
    local scope="$1"
    local key="$2"
    local config_flag=""
    [[ "$scope" == "global" ]] && config_flag="--global"
    
    local value
    value=$(git config $config_flag --get "$key")
    if [ -n "$value" ]; then
        echo "$value"
    else
        echo "Not set"
    fi
}

# Function to check if a command exists
command-exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check Git version
git-version-check() {
    local git_version
    git_version=$(git --version | awk '{print $3}')
    if [ "$(printf '%s\n' "2.34" "$git_version" | sort -V | head -n1)" != "2.34" ]; then
        echo "Error: Git version 2.34 or higher is required for SSH signing."
        return 1
    fi
    return 0
}

# Function to set up Git SSH signing config
git-ssh-signing-setup() {
    local scope=""
    local ssh_key=""

    # Function to display help
    show_help() {
        echo "Usage: git-ssh-signing-setup [OPTIONS] [SSH_KEY_PATH]"
        echo
        echo "Set up Git SSH signing configuration."
        echo
        echo "Options:"
        echo "  --global    Set the configuration globally"
        echo "  --local     Set the configuration locally (default if not specified)"
        echo "  help        Display this help message"
        echo
        echo "If SSH_KEY_PATH is not provided, you'll be prompted to select a key from \$KEYCUTTER_SSH_KEY_DIR"
    }

    # Function to select SSH key
    select_ssh_key() {
        if command -v fzf &> /dev/null; then
            ssh_key=$(find "$KEYCUTTER_SSH_KEY_DIR" -type f -not -name '*.pub' | fzf --prompt="Select SSH key: " --preview="ssh-keygen -lf {}")
        else
            echo "Select an SSH key:"
            local keys=()
            while IFS= read -r -d $'\0' file; do
                keys+=("$file")
            done < <(find "$KEYCUTTER_SSH_KEY_DIR" -type f -not -name '*.pub' -print0)
            
            select key in "${keys[@]}"; do
                if [ -n "$key" ]; then
                    ssh_key="$key"
                    break
                else
                    echo "Invalid selection. Please try again."
                fi
            done
        fi

        if [ -z "$ssh_key" ]; then
            log "No SSH key selected. Exiting."
            return 1
        fi
    }

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --global)
                scope="global"
                shift
                ;;
            --local)
                scope="local"
                shift
                ;;
            help)
                show_help
                return 0
                ;;
            *)
                # Assume it's the SSH key path
                ssh_key="$1"
                shift
                ;;
        esac
    done

    # If no scope was explicitly set, default to local
    if [ -z "$scope" ]; then
        log "No scope specified. Defaulting to 'local' config."
        scope="local"
    fi

    # If no SSH key was provided, use select_ssh_key function to choose one
    if [ -z "$ssh_key" ]; then
        select_ssh_key || return 1
    fi

    # Display proposed changes and ask for confirmation
    log "Proposed Git SSH signing configuration:"
    log " Scope: $scope"
    log " SSH Key: $ssh_key"
    log " gpg.format: ssh"
    log " gpg.ssh.program: $HOME/.ssh/keycutter/scripts/git-commit-sign"
    echo
    prompt "Do you want to apply these changes? (y/N) "
    read -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]
    then
        log "Operation cancelled."
        return 1
    fi

    log "Setting up Git SSH signing ($scope config)..."

    # Apply the configurations
    git-config-set "$scope" "gpg.format" "ssh"
    local script_path="$HOME/.ssh/keycutter/scripts/git-commit-sign"
    git-config-set "$scope" "gpg.ssh.program" "$script_path"

    if [ ! -f "$ssh_key" ]; then
        log "Error: SSH key not found at $ssh_key"
        return 1
    fi

    git-config-set "$scope" "user.signingkey" "$ssh_key"
    log "Git SSH signing basic setup complete for $scope config!"
    return 0
}

# Function to enable commit signing
git-commit-signing-enable() {
    local scope=""

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --global)
                scope="global"
                shift
                ;;
            --local)
                scope="local"
                shift
                ;;
            *)
                log "Error: Unknown option $1"
                return 1
                ;;
        esac
    done

    # If no scope was explicitly set, default to local
    if [ -z "$scope" ]; then
        log "No scope specified. Defaulting to 'local' config."
        scope="local"
    fi

    local config_flag=""
    if [ "$scope" = "global" ]; then
        config_flag="--global"
    fi

    git config $config_flag "commit.gpgsign" "true"
    log "Enabled commit signing for $scope config"
}

# Function to disable commit signing
git-commit-signing-disable() {
    local scope=""

    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --global)
                scope="global"
                shift
                ;;
            --local)
                scope="local"
                shift
                ;;
            *)
                log "Error: Unknown option $1"
                return 1
                ;;
        esac
    done

    # If no scope was explicitly set, default to local
    if [ -z "$scope" ]; then
        log "No scope specified. Defaulting to 'local' config."
        scope="local"
    fi

    local config_flag=""
    if [ "$scope" = "global" ]; then
        config_flag="--global"
    fi

    git config $config_flag --unset "commit.gpgsign"
    log "Disabled commit signing for $scope config"
}

# Function to check Git SSH signing configuration
git-ssh-signing-check() {
    local scope="$1"

    if [ -z "$scope" ]; then
        log "Checking Git SSH signing configuration (local config):"
    else
        log "Checking Git SSH signing configuration ($scope config):"
    fi
    log "gpg.format: $(git-config-get "$scope" gpg.format)"
    log "gpg.ssh.program: $(git-config-get "$scope" gpg.ssh.program)"
    log "user.signingkey: $(git-config-get "$scope" user.signingkey)"
    log "commit.gpgsign: $(git-config-get "$scope" commit.gpgsign)"
}

# Function to print setup instructions
git-ssh-signing-instructions() {
    local ssh_key="${1:-$KEYCUTTER_SSH_KEY_DIR}"
    log "Setup instructions:"
    log "1. Create a key via keycutter:"
    log "   \`keycutter create\`"
    log "2. Make sure the Git SSH signing script is in place:"
    log "   \`keycutter update-ssh-config\`"
    log "3. Set up Git SSH signing:"
    log "   \`keycutter git-signing-setup\`"
}

# Example usage function
git-ssh-signing-example() {
    log "Example usage:"
    log "source ./git_ssh_signing_functions.sh"
    log "git-version-check"
    log "git-ssh-signing-setup --global"
    log "git-commit-signing-enable global"
    log "git-ssh-signing-check global"
    log "git-ssh-signing-instructions"
}

# If this script is run directly, print example usage
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    example_usage
fi